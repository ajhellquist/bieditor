{"ast":null,"code":"var _jsxFileName = \"/Users/andrewhellquist/Desktop/Cursor/my-bi-editor/frontend/src/components/CodeEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CodeEditor({\n  code,\n  setCode,\n  variables,\n  selectedPID\n}) {\n  _s();\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [cursorPosition, setCursorPosition] = useState(0);\n  const [currentWord, setCurrentWord] = useState('');\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [filteredSuggestions, setFilteredSuggestions] = useState([]);\n  const [copySuccess, setCopySuccess] = useState(false);\n  const editorRef = useRef(null);\n\n  // Helper function to get color based on variable type\n  const getVariableColor = type => {\n    switch (type) {\n      case 'Metric':\n        return '#4CAF50';\n      // green\n      case 'Attribute':\n        return '#9C27B0';\n      // purple\n      case 'Attribute Value':\n        return '#FF9800';\n      // orange\n      default:\n        return 'black';\n    }\n  };\n\n  // Helper function to get variable reference\n  const getVariableReference = variable => {\n    if (!selectedPID) return '';\n    const baseRef = `[/gdc/md/${selectedPID.pid}/obj/${variable._id}`;\n    if (variable.type === 'Attribute Value') {\n      return `${baseRef}/elements?id=${variable.elementId}]`;\n    }\n    return `${baseRef}]`;\n  };\n  useEffect(() => {\n    const filtered = variables.filter(v => v.name.toLowerCase().includes(currentWord.toLowerCase()));\n    setFilteredSuggestions(filtered);\n    setSelectedIndex(0);\n  }, [currentWord, variables]);\n  const handleInputChange = e => {\n    // Get the current content directly from the contentEditable div\n    const content = e.target.innerHTML;\n    setCode(content);\n\n    // Get the text content for word matching\n    const textContent = e.target.textContent || '';\n\n    // Get cursor position\n    const selection = window.getSelection();\n    if (selection.rangeCount > 0) {\n      const range = selection.getRangeAt(0);\n      const preCaretRange = range.cloneRange();\n      preCaretRange.selectNodeContents(e.target);\n      preCaretRange.setEnd(range.endContainer, range.endOffset);\n      const position = preCaretRange.toString().length;\n      setCursorPosition(position);\n\n      // Get current word\n      const textBeforeCursor = textContent.substring(0, position);\n      const wordMatch = textBeforeCursor.match(/\\S+$/);\n      const currentTypedWord = wordMatch ? wordMatch[0] : '';\n      setCurrentWord(currentTypedWord);\n      setShowSuggestions(currentTypedWord.length > 0);\n    }\n  };\n  const insertSuggestion = variable => {\n    const selection = window.getSelection();\n    if (!selection.rangeCount) return;\n    const range = selection.getRangeAt(0);\n    const preCaretRange = range.cloneRange();\n    preCaretRange.selectNodeContents(editorRef.current);\n    preCaretRange.setEnd(range.endContainer, range.endOffset);\n    const textBeforeCursor = preCaretRange.toString();\n    const wordMatch = textBeforeCursor.match(/\\S+$/);\n    const startPos = wordMatch ? textBeforeCursor.length - wordMatch[0].length : textBeforeCursor.length;\n    const variableRef = getVariableReference(variable);\n    const styledSpan = document.createElement('span');\n    styledSpan.style.color = getVariableColor(variable.type);\n    styledSpan.setAttribute('data-reference', variableRef);\n    styledSpan.textContent = variable.name;\n\n    // Insert the styled span\n    const content = editorRef.current.textContent;\n    const beforeText = content.substring(0, startPos);\n    const afterText = content.substring(cursorPosition);\n    editorRef.current.innerHTML = beforeText;\n    editorRef.current.appendChild(styledSpan);\n    editorRef.current.innerHTML += afterText;\n\n    // Reset suggestions\n    setShowSuggestions(false);\n\n    // Update code state\n    setCode(editorRef.current.innerHTML);\n  };\n  const handleCopyCode = () => {\n    if (editorRef.current) {\n      // Get all spans and their references\n      const spans = editorRef.current.getElementsByTagName('span');\n      let finalText = editorRef.current.textContent;\n\n      // Replace each span's visible text with its reference\n      Array.from(spans).reverse().forEach(span => {\n        const reference = span.getAttribute('data-reference');\n        if (reference) {\n          const startPos = finalText.indexOf(span.textContent);\n          finalText = finalText.substring(0, startPos) + reference + finalText.substring(startPos + span.textContent.length);\n        }\n      });\n\n      // Copy to clipboard\n      navigator.clipboard.writeText(finalText).then(() => {\n        setCopySuccess(true);\n        setTimeout(() => setCopySuccess(false), 2000); // Reset after 2 seconds\n      });\n    }\n  };\n  const handleKeyDown = e => {\n    if (!showSuggestions) return;\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setSelectedIndex(prev => prev < filteredSuggestions.length - 1 ? prev + 1 : prev);\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setSelectedIndex(prev => prev > 0 ? prev - 1 : prev);\n        break;\n      case 'Tab':\n      case 'Enter':\n        e.preventDefault();\n        if (filteredSuggestions[selectedIndex]) {\n          insertSuggestion(filteredSuggestions[selectedIndex]);\n        }\n        break;\n      case 'Escape':\n        setShowSuggestions(false);\n        break;\n      default:\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        marginBottom: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCopyCode,\n        style: {\n          padding: '5px 10px',\n          backgroundColor: copySuccess ? '#4CAF50' : '#2196F3',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: copySuccess ? 'Copied!' : 'Copy Code'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: editorRef,\n      contentEditable: true,\n      onInput: handleInputChange,\n      onKeyDown: handleKeyDown,\n      style: {\n        border: '1px solid #ccc',\n        minHeight: '200px',\n        padding: '10px',\n        whiteSpace: 'pre-wrap',\n        fontFamily: 'monospace'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), showSuggestions && filteredSuggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '100%',\n        left: 0,\n        backgroundColor: 'white',\n        border: '1px solid #ccc',\n        maxHeight: '200px',\n        overflowY: 'auto',\n        width: '200px',\n        zIndex: 1000\n      },\n      children: filteredSuggestions.map((variable, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => insertSuggestion(variable),\n        style: {\n          padding: '5px 10px',\n          cursor: 'pointer',\n          backgroundColor: index === selectedIndex ? '#f0f0f0' : 'white',\n          color: getVariableColor(variable.type)\n        },\n        children: variable.name\n      }, variable._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n}\n_s(CodeEditor, \"XWuxxS+KJgALqpSLie8JFj8OrDc=\");\n_c = CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","CodeEditor","code","setCode","variables","selectedPID","_s","showSuggestions","setShowSuggestions","cursorPosition","setCursorPosition","currentWord","setCurrentWord","selectedIndex","setSelectedIndex","filteredSuggestions","setFilteredSuggestions","copySuccess","setCopySuccess","editorRef","getVariableColor","type","getVariableReference","variable","baseRef","pid","_id","elementId","filtered","filter","v","name","toLowerCase","includes","handleInputChange","e","content","target","innerHTML","textContent","selection","window","getSelection","rangeCount","range","getRangeAt","preCaretRange","cloneRange","selectNodeContents","setEnd","endContainer","endOffset","position","toString","length","textBeforeCursor","substring","wordMatch","match","currentTypedWord","insertSuggestion","current","startPos","variableRef","styledSpan","document","createElement","style","color","setAttribute","beforeText","afterText","appendChild","handleCopyCode","spans","getElementsByTagName","finalText","Array","from","reverse","forEach","span","reference","getAttribute","indexOf","navigator","clipboard","writeText","then","setTimeout","handleKeyDown","key","preventDefault","prev","children","display","justifyContent","marginBottom","onClick","padding","backgroundColor","border","borderRadius","cursor","fileName","_jsxFileName","lineNumber","columnNumber","ref","contentEditable","onInput","onKeyDown","minHeight","whiteSpace","fontFamily","top","left","maxHeight","overflowY","width","zIndex","map","index","_c","$RefreshReg$"],"sources":["/Users/andrewhellquist/Desktop/Cursor/my-bi-editor/frontend/src/components/CodeEditor.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nexport default function CodeEditor({ code, setCode, variables, selectedPID }) {\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [cursorPosition, setCursorPosition] = useState(0);\n  const [currentWord, setCurrentWord] = useState('');\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [filteredSuggestions, setFilteredSuggestions] = useState([]);\n  const [copySuccess, setCopySuccess] = useState(false);\n  const editorRef = useRef(null);\n\n  // Helper function to get color based on variable type\n  const getVariableColor = (type) => {\n    switch (type) {\n      case 'Metric':\n        return '#4CAF50'; // green\n      case 'Attribute':\n        return '#9C27B0'; // purple\n      case 'Attribute Value':\n        return '#FF9800'; // orange\n      default:\n        return 'black';\n    }\n  };\n\n  // Helper function to get variable reference\n  const getVariableReference = (variable) => {\n    if (!selectedPID) return '';\n    \n    const baseRef = `[/gdc/md/${selectedPID.pid}/obj/${variable._id}`;\n    \n    if (variable.type === 'Attribute Value') {\n      return `${baseRef}/elements?id=${variable.elementId}]`;\n    }\n    \n    return `${baseRef}]`;\n  };\n\n  useEffect(() => {\n    const filtered = variables.filter(v => \n      v.name.toLowerCase().includes(currentWord.toLowerCase())\n    );\n    setFilteredSuggestions(filtered);\n    setSelectedIndex(0);\n  }, [currentWord, variables]);\n\n  const handleInputChange = (e) => {\n    // Get the current content directly from the contentEditable div\n    const content = e.target.innerHTML;\n    setCode(content);\n\n    // Get the text content for word matching\n    const textContent = e.target.textContent || '';\n\n    // Get cursor position\n    const selection = window.getSelection();\n    if (selection.rangeCount > 0) {\n      const range = selection.getRangeAt(0);\n      const preCaretRange = range.cloneRange();\n      preCaretRange.selectNodeContents(e.target);\n      preCaretRange.setEnd(range.endContainer, range.endOffset);\n      const position = preCaretRange.toString().length;\n      setCursorPosition(position);\n\n      // Get current word\n      const textBeforeCursor = textContent.substring(0, position);\n      const wordMatch = textBeforeCursor.match(/\\S+$/);\n      const currentTypedWord = wordMatch ? wordMatch[0] : '';\n      setCurrentWord(currentTypedWord);\n      setShowSuggestions(currentTypedWord.length > 0);\n    }\n  };\n\n  const insertSuggestion = (variable) => {\n    const selection = window.getSelection();\n    if (!selection.rangeCount) return;\n\n    const range = selection.getRangeAt(0);\n    const preCaretRange = range.cloneRange();\n    preCaretRange.selectNodeContents(editorRef.current);\n    preCaretRange.setEnd(range.endContainer, range.endOffset);\n    \n    const textBeforeCursor = preCaretRange.toString();\n    const wordMatch = textBeforeCursor.match(/\\S+$/);\n    const startPos = wordMatch ? textBeforeCursor.length - wordMatch[0].length : textBeforeCursor.length;\n    \n    const variableRef = getVariableReference(variable);\n    const styledSpan = document.createElement('span');\n    styledSpan.style.color = getVariableColor(variable.type);\n    styledSpan.setAttribute('data-reference', variableRef);\n    styledSpan.textContent = variable.name;\n    \n    // Insert the styled span\n    const content = editorRef.current.textContent;\n    const beforeText = content.substring(0, startPos);\n    const afterText = content.substring(cursorPosition);\n    \n    editorRef.current.innerHTML = beforeText;\n    editorRef.current.appendChild(styledSpan);\n    editorRef.current.innerHTML += afterText;\n    \n    // Reset suggestions\n    setShowSuggestions(false);\n    \n    // Update code state\n    setCode(editorRef.current.innerHTML);\n  };\n\n  const handleCopyCode = () => {\n    if (editorRef.current) {\n      // Get all spans and their references\n      const spans = editorRef.current.getElementsByTagName('span');\n      let finalText = editorRef.current.textContent;\n\n      // Replace each span's visible text with its reference\n      Array.from(spans).reverse().forEach(span => {\n        const reference = span.getAttribute('data-reference');\n        if (reference) {\n          const startPos = finalText.indexOf(span.textContent);\n          finalText = finalText.substring(0, startPos) + \n                     reference + \n                     finalText.substring(startPos + span.textContent.length);\n        }\n      });\n\n      // Copy to clipboard\n      navigator.clipboard.writeText(finalText).then(() => {\n        setCopySuccess(true);\n        setTimeout(() => setCopySuccess(false), 2000); // Reset after 2 seconds\n      });\n    }\n  };\n\n  const handleKeyDown = (e) => {\n    if (!showSuggestions) return;\n\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setSelectedIndex(prev => \n          prev < filteredSuggestions.length - 1 ? prev + 1 : prev\n        );\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setSelectedIndex(prev => prev > 0 ? prev - 1 : prev);\n        break;\n      case 'Tab':\n      case 'Enter':\n        e.preventDefault();\n        if (filteredSuggestions[selectedIndex]) {\n          insertSuggestion(filteredSuggestions[selectedIndex]);\n        }\n        break;\n      case 'Escape':\n        setShowSuggestions(false);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '10px' }}>\n        <button \n          onClick={handleCopyCode}\n          style={{\n            padding: '5px 10px',\n            backgroundColor: copySuccess ? '#4CAF50' : '#2196F3',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          }}\n        >\n          {copySuccess ? 'Copied!' : 'Copy Code'}\n        </button>\n      </div>\n      <div \n        ref={editorRef}\n        contentEditable={true}\n        onInput={handleInputChange}\n        onKeyDown={handleKeyDown}\n        style={{\n          border: '1px solid #ccc',\n          minHeight: '200px',\n          padding: '10px',\n          whiteSpace: 'pre-wrap',\n          fontFamily: 'monospace'\n        }}\n      />\n      \n      {showSuggestions && filteredSuggestions.length > 0 && (\n        <div style={{\n          position: 'absolute',\n          top: '100%',\n          left: 0,\n          backgroundColor: 'white',\n          border: '1px solid #ccc',\n          maxHeight: '200px',\n          overflowY: 'auto',\n          width: '200px',\n          zIndex: 1000\n        }}>\n          {filteredSuggestions.map((variable, index) => (\n            <div\n              key={variable._id}\n              onClick={() => insertSuggestion(variable)}\n              style={{\n                padding: '5px 10px',\n                cursor: 'pointer',\n                backgroundColor: index === selectedIndex ? '#f0f0f0' : 'white',\n                color: getVariableColor(variable.type)\n              }}\n            >\n              {variable.name}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}