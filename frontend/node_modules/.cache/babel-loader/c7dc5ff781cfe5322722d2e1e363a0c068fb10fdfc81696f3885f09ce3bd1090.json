{"ast":null,"code":"var _jsxFileName = \"/Users/andrewhellquist/Desktop/Cursor/my-bi-editor/frontend/src/components/CodeEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CodeEditor({\n  code,\n  setCode,\n  variables,\n  selectedPID\n}) {\n  _s();\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [cursorPosition, setCursorPosition] = useState(0);\n  const [currentWord, setCurrentWord] = useState('');\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [filteredSuggestions, setFilteredSuggestions] = useState([]);\n  const [copySuccess, setCopySuccess] = useState(false);\n  const editorRef = useRef(null);\n\n  // Helper function to get color based on variable type\n  const getVariableColor = type => {\n    switch (type) {\n      case 'Metric':\n        return '#4CAF50';\n      // green\n      case 'Attribute':\n        return '#9C27B0';\n      // purple\n      case 'Attribute Value':\n        return '#FF9800';\n      // orange\n      default:\n        return 'black';\n    }\n  };\n\n  // Debug logging for selectedPID\n  useEffect(() => {\n    console.log('Selected PID:', selectedPID);\n  }, [selectedPID]);\n\n  // Add debugging for selectedPID\n  useEffect(() => {\n    console.log('CodeEditor received selectedPID:', selectedPID);\n  }, [selectedPID]);\n  const getVariableReference = variable => {\n    if (!selectedPID) {\n      console.warn('No PID selected');\n      return '';\n    }\n\n    // Debug the incoming data\n    console.log('Creating reference with:', {\n      variable,\n      selectedPID,\n      pidId: selectedPID.pidId || selectedPID.pid,\n      variableValue: variable.value\n    });\n\n    // Get the PID identifier\n    const pidIdentifier = selectedPID.pidId || selectedPID.pid;\n    if (!pidIdentifier) {\n      console.error('No valid PID identifier found');\n      return '';\n    }\n\n    // Build the reference string\n    let reference;\n    if (variable.type === 'Attribute Value') {\n      reference = `[/gdc/md/${pidIdentifier}/obj/${variable.value}/elements?id=${variable.elementId}]`;\n    } else {\n      reference = `[/gdc/md/${pidIdentifier}/obj/${variable.value}]`;\n    }\n    console.log('Generated reference:', reference);\n    return reference;\n  };\n  useEffect(() => {\n    const filtered = variables.filter(v => v.name.toLowerCase().includes(currentWord.toLowerCase()));\n    setFilteredSuggestions(filtered);\n    setSelectedIndex(0);\n  }, [currentWord, variables]);\n  const handleInputChange = e => {\n    // Store the HTML content\n    setCode(editorRef.current.innerHTML);\n\n    // Get the current text and cursor position\n    const selection = window.getSelection();\n    if (!selection.rangeCount) return;\n    const range = selection.getRangeAt(0);\n    const textNode = range.startContainer;\n    if (textNode.nodeType === Node.TEXT_NODE) {\n      const text = textNode.textContent;\n      const cursorPos = range.startOffset;\n\n      // Find the word being typed\n      const beforeCursor = text.substring(0, cursorPos);\n      const wordMatch = beforeCursor.match(/\\S+$/);\n      const currentTypedWord = wordMatch ? wordMatch[0] : '';\n      console.log('Typing word:', currentTypedWord);\n      setCurrentWord(currentTypedWord);\n      setShowSuggestions(currentTypedWord.length > 0);\n      setCursorPosition(cursorPos);\n    }\n  };\n  const insertSuggestion = variable => {\n    const selection = window.getSelection();\n    if (!selection.rangeCount) return;\n    const range = selection.getRangeAt(0);\n    const textNode = range.startContainer;\n    if (textNode.nodeType === Node.TEXT_NODE) {\n      const text = textNode.textContent;\n      const cursorPos = range.startOffset;\n      const beforeCursor = text.substring(0, cursorPos);\n      const afterCursor = text.substring(cursorPos);\n      const wordMatch = beforeCursor.match(/\\S+$/);\n      if (wordMatch) {\n        const wordStart = cursorPos - wordMatch[0].length;\n        const beforeWord = text.substring(0, wordStart);\n\n        // Create text nodes for before and after\n        const beforeTextNode = document.createTextNode(beforeWord);\n        const afterTextNode = document.createTextNode(' ' + afterCursor);\n\n        // Create the variable span\n        const variableSpan = document.createElement('span');\n        variableSpan.className = 'variable-reference';\n        variableSpan.style.color = getVariableColor(variable.type);\n        variableSpan.setAttribute('data-reference', getVariableReference(variable));\n        variableSpan.textContent = variable.name;\n\n        // Replace the content\n        const parentNode = textNode.parentNode;\n        parentNode.replaceChild(afterTextNode, textNode);\n        parentNode.insertBefore(variableSpan, afterTextNode);\n        parentNode.insertBefore(beforeTextNode, variableSpan);\n\n        // Set cursor position after the span\n        const newRange = document.createRange();\n        newRange.setStartAfter(afterTextNode);\n        newRange.collapse(true);\n        selection.removeAllRanges();\n        selection.addRange(newRange);\n        setCode(editorRef.current.innerHTML);\n      }\n    }\n    setShowSuggestions(false);\n  };\n  const handleCopyCode = () => {\n    if (!editorRef.current) return;\n    console.log('Starting copy operation...');\n\n    // Create a temporary div\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = editorRef.current.innerHTML;\n\n    // Get all nodes in order (text nodes and variable spans)\n    const walker = document.createTreeWalker(tempDiv, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT, {\n      acceptNode: node => {\n        if (node.nodeType === Node.TEXT_NODE && (!node.parentElement || !node.parentElement.classList.contains('variable-reference'))) {\n          // Only accept text nodes that aren't inside variable spans\n          return NodeFilter.FILTER_ACCEPT;\n        }\n        if (node.nodeType === Node.ELEMENT_NODE && node.classList.contains('variable-reference')) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n        return NodeFilter.FILTER_SKIP;\n      }\n    });\n    let finalText = '';\n    let node;\n    while (node = walker.nextNode()) {\n      if (node.nodeType === Node.TEXT_NODE && (!node.parentElement || !node.parentElement.classList.contains('variable-reference'))) {\n        // Only process text nodes that aren't inside variable spans\n        const text = node.textContent.trim();\n        if (text) {\n          finalText += text + ' ';\n        }\n      } else if (node.classList.contains('variable-reference')) {\n        // For variable spans, only add their reference\n        const reference = node.getAttribute('data-reference');\n        if (reference) {\n          finalText += reference + ' ';\n        }\n      }\n    }\n\n    // Clean up any extra spaces and trim\n    finalText = finalText.replace(/\\s+/g, ' ').trim();\n    console.log('Final text to copy:', finalText);\n    navigator.clipboard.writeText(finalText).then(() => {\n      setCopySuccess(true);\n      setTimeout(() => setCopySuccess(false), 2000);\n    });\n  };\n  const handleCopy = async () => {\n    try {\n      // Existing copy logic...\n\n      // Add metric\n      const token = localStorage.getItem('token');\n      await axios.post('http://localhost:4000/metrics', {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    } catch (error) {\n      console.error('Error recording metric:', error);\n    }\n  };\n  const handleKeyDown = e => {\n    if (!showSuggestions || !filteredSuggestions.length) return;\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setSelectedIndex(prev => prev < filteredSuggestions.length - 1 ? prev + 1 : prev);\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setSelectedIndex(prev => prev > 0 ? prev - 1 : prev);\n        break;\n      case 'Tab':\n      case 'Enter':\n        e.preventDefault();\n        if (filteredSuggestions[selectedIndex]) {\n          insertSuggestion(filteredSuggestions[selectedIndex]);\n        }\n        break;\n      case 'Escape':\n        setShowSuggestions(false);\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      display: 'flex',\n      gap: '20px',\n      margin: '25px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '15%',\n        border: '1px solid black',\n        borderRadius: '4px',\n        backgroundColor: 'white',\n        height: '400px',\n        overflowY: 'auto'\n      },\n      children: showSuggestions && filteredSuggestions.length > 0 ? filteredSuggestions.map((variable, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => insertSuggestion(variable),\n        style: {\n          padding: '8px 10px',\n          cursor: 'pointer',\n          backgroundColor: index === selectedIndex ? '#f0f0f0' : 'white',\n          color: getVariableColor(variable.type),\n          borderBottom: '1px solid #eee'\n        },\n        children: variable.name\n      }, variable._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '8px 10px',\n          color: '#666'\n        },\n        children: currentWord ? 'No matches found' : 'Start typing to see suggestions'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: editorRef,\n        contentEditable: true,\n        onInput: handleInputChange,\n        onKeyDown: handleKeyDown,\n        style: {\n          border: '1px solid black',\n          borderRadius: '4px',\n          height: '400px',\n          overflowY: 'auto',\n          padding: '10px',\n          whiteSpace: 'pre-wrap',\n          fontFamily: 'Times New Roman',\n          backgroundColor: 'white',\n          marginBottom: '10px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'flex-start'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCopyCode,\n          style: {\n            padding: '6px 12px',\n            backgroundColor: copySuccess ? '#28A745' : '#cccccc',\n            color: 'black',\n            border: '3px solid black',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          children: copySuccess ? 'Copied!' : 'Copy Code'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this);\n}\n_s(CodeEditor, \"Hcr6Dor3VOseailz0J2giijL+K4=\");\n_c = CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","CodeEditor","code","setCode","variables","selectedPID","_s","showSuggestions","setShowSuggestions","cursorPosition","setCursorPosition","currentWord","setCurrentWord","selectedIndex","setSelectedIndex","filteredSuggestions","setFilteredSuggestions","copySuccess","setCopySuccess","editorRef","getVariableColor","type","console","log","getVariableReference","variable","warn","pidId","pid","variableValue","value","pidIdentifier","error","reference","elementId","filtered","filter","v","name","toLowerCase","includes","handleInputChange","e","current","innerHTML","selection","window","getSelection","rangeCount","range","getRangeAt","textNode","startContainer","nodeType","Node","TEXT_NODE","text","textContent","cursorPos","startOffset","beforeCursor","substring","wordMatch","match","currentTypedWord","length","insertSuggestion","afterCursor","wordStart","beforeWord","beforeTextNode","document","createTextNode","afterTextNode","variableSpan","createElement","className","style","color","setAttribute","parentNode","replaceChild","insertBefore","newRange","createRange","setStartAfter","collapse","removeAllRanges","addRange","handleCopyCode","tempDiv","walker","createTreeWalker","NodeFilter","SHOW_TEXT","SHOW_ELEMENT","acceptNode","node","parentElement","classList","contains","FILTER_ACCEPT","ELEMENT_NODE","FILTER_SKIP","finalText","nextNode","trim","getAttribute","replace","navigator","clipboard","writeText","then","setTimeout","handleCopy","token","localStorage","getItem","post","headers","Authorization","handleKeyDown","key","preventDefault","prev","position","display","gap","margin","children","width","border","borderRadius","backgroundColor","height","overflowY","map","index","onClick","padding","cursor","borderBottom","_id","fileName","_jsxFileName","lineNumber","columnNumber","flex","flexDirection","ref","contentEditable","onInput","onKeyDown","whiteSpace","fontFamily","marginBottom","justifyContent","_c","$RefreshReg$"],"sources":["/Users/andrewhellquist/Desktop/Cursor/my-bi-editor/frontend/src/components/CodeEditor.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\n\nexport default function CodeEditor({ code, setCode, variables, selectedPID }) {\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [cursorPosition, setCursorPosition] = useState(0);\n  const [currentWord, setCurrentWord] = useState('');\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [filteredSuggestions, setFilteredSuggestions] = useState([]);\n  const [copySuccess, setCopySuccess] = useState(false);\n  const editorRef = useRef(null);\n\n  // Helper function to get color based on variable type\n  const getVariableColor = (type) => {\n    switch (type) {\n      case 'Metric':\n        return '#4CAF50'; // green\n      case 'Attribute':\n        return '#9C27B0'; // purple\n      case 'Attribute Value':\n        return '#FF9800'; // orange\n      default:\n        return 'black';\n    }\n  };\n\n  // Debug logging for selectedPID\n  useEffect(() => {\n    console.log('Selected PID:', selectedPID);\n  }, [selectedPID]);\n\n  // Add debugging for selectedPID\n  useEffect(() => {\n    console.log('CodeEditor received selectedPID:', selectedPID);\n  }, [selectedPID]);\n\n  const getVariableReference = (variable) => {\n    if (!selectedPID) {\n      console.warn('No PID selected');\n      return '';\n    }\n    \n    // Debug the incoming data\n    console.log('Creating reference with:', {\n      variable,\n      selectedPID,\n      pidId: selectedPID.pidId || selectedPID.pid,\n      variableValue: variable.value\n    });\n    \n    // Get the PID identifier\n    const pidIdentifier = selectedPID.pidId || selectedPID.pid;\n    if (!pidIdentifier) {\n      console.error('No valid PID identifier found');\n      return '';\n    }\n\n    // Build the reference string\n    let reference;\n    if (variable.type === 'Attribute Value') {\n      reference = `[/gdc/md/${pidIdentifier}/obj/${variable.value}/elements?id=${variable.elementId}]`;\n    } else {\n      reference = `[/gdc/md/${pidIdentifier}/obj/${variable.value}]`;\n    }\n\n    console.log('Generated reference:', reference);\n    return reference;\n  };\n\n  useEffect(() => {\n    const filtered = variables.filter(v => \n      v.name.toLowerCase().includes(currentWord.toLowerCase())\n    );\n    setFilteredSuggestions(filtered);\n    setSelectedIndex(0);\n  }, [currentWord, variables]);\n\n  const handleInputChange = (e) => {\n    // Store the HTML content\n    setCode(editorRef.current.innerHTML);\n\n    // Get the current text and cursor position\n    const selection = window.getSelection();\n    if (!selection.rangeCount) return;\n\n    const range = selection.getRangeAt(0);\n    const textNode = range.startContainer;\n\n    if (textNode.nodeType === Node.TEXT_NODE) {\n      const text = textNode.textContent;\n      const cursorPos = range.startOffset;\n      \n      // Find the word being typed\n      const beforeCursor = text.substring(0, cursorPos);\n      const wordMatch = beforeCursor.match(/\\S+$/);\n      const currentTypedWord = wordMatch ? wordMatch[0] : '';\n      \n      console.log('Typing word:', currentTypedWord);\n      setCurrentWord(currentTypedWord);\n      setShowSuggestions(currentTypedWord.length > 0);\n      setCursorPosition(cursorPos);\n    }\n  };\n\n  const insertSuggestion = (variable) => {\n    const selection = window.getSelection();\n    if (!selection.rangeCount) return;\n\n    const range = selection.getRangeAt(0);\n    const textNode = range.startContainer;\n\n    if (textNode.nodeType === Node.TEXT_NODE) {\n      const text = textNode.textContent;\n      const cursorPos = range.startOffset;\n      const beforeCursor = text.substring(0, cursorPos);\n      const afterCursor = text.substring(cursorPos);\n      const wordMatch = beforeCursor.match(/\\S+$/);\n\n      if (wordMatch) {\n        const wordStart = cursorPos - wordMatch[0].length;\n        const beforeWord = text.substring(0, wordStart);\n\n        // Create text nodes for before and after\n        const beforeTextNode = document.createTextNode(beforeWord);\n        const afterTextNode = document.createTextNode(' ' + afterCursor);\n\n        // Create the variable span\n        const variableSpan = document.createElement('span');\n        variableSpan.className = 'variable-reference';\n        variableSpan.style.color = getVariableColor(variable.type);\n        variableSpan.setAttribute('data-reference', getVariableReference(variable));\n        variableSpan.textContent = variable.name;\n\n        // Replace the content\n        const parentNode = textNode.parentNode;\n        parentNode.replaceChild(afterTextNode, textNode);\n        parentNode.insertBefore(variableSpan, afterTextNode);\n        parentNode.insertBefore(beforeTextNode, variableSpan);\n\n        // Set cursor position after the span\n        const newRange = document.createRange();\n        newRange.setStartAfter(afterTextNode);\n        newRange.collapse(true);\n        selection.removeAllRanges();\n        selection.addRange(newRange);\n\n        setCode(editorRef.current.innerHTML);\n      }\n    }\n    setShowSuggestions(false);\n  };\n\n  const handleCopyCode = () => {\n    if (!editorRef.current) return;\n    console.log('Starting copy operation...');\n\n    // Create a temporary div\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = editorRef.current.innerHTML;\n\n    // Get all nodes in order (text nodes and variable spans)\n    const walker = document.createTreeWalker(\n      tempDiv,\n      NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT,\n      {\n        acceptNode: (node) => {\n          if (node.nodeType === Node.TEXT_NODE && \n              (!node.parentElement || !node.parentElement.classList.contains('variable-reference'))) {\n            // Only accept text nodes that aren't inside variable spans\n            return NodeFilter.FILTER_ACCEPT;\n          }\n          if (node.nodeType === Node.ELEMENT_NODE && \n              node.classList.contains('variable-reference')) {\n            return NodeFilter.FILTER_ACCEPT;\n          }\n          return NodeFilter.FILTER_SKIP;\n        }\n      }\n    );\n\n    let finalText = '';\n    let node;\n\n    while (node = walker.nextNode()) {\n      if (node.nodeType === Node.TEXT_NODE && \n          (!node.parentElement || !node.parentElement.classList.contains('variable-reference'))) {\n        // Only process text nodes that aren't inside variable spans\n        const text = node.textContent.trim();\n        if (text) {\n          finalText += text + ' ';\n        }\n      } else if (node.classList.contains('variable-reference')) {\n        // For variable spans, only add their reference\n        const reference = node.getAttribute('data-reference');\n        if (reference) {\n          finalText += reference + ' ';\n        }\n      }\n    }\n\n    // Clean up any extra spaces and trim\n    finalText = finalText.replace(/\\s+/g, ' ').trim();\n    \n    console.log('Final text to copy:', finalText);\n\n    navigator.clipboard.writeText(finalText).then(() => {\n      setCopySuccess(true);\n      setTimeout(() => setCopySuccess(false), 2000);\n    });\n  };\n\n  const handleCopy = async () => {\n    try {\n      // Existing copy logic...\n      \n      // Add metric\n      const token = localStorage.getItem('token');\n      await axios.post('http://localhost:4000/metrics', {}, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      \n    } catch (error) {\n      console.error('Error recording metric:', error);\n    }\n  };\n\n  const handleKeyDown = (e) => {\n    if (!showSuggestions || !filteredSuggestions.length) return;\n\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setSelectedIndex(prev => \n          prev < filteredSuggestions.length - 1 ? prev + 1 : prev\n        );\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setSelectedIndex(prev => prev > 0 ? prev - 1 : prev);\n        break;\n      case 'Tab':\n      case 'Enter':\n        e.preventDefault();\n        if (filteredSuggestions[selectedIndex]) {\n          insertSuggestion(filteredSuggestions[selectedIndex]);\n        }\n        break;\n      case 'Escape':\n        setShowSuggestions(false);\n        break;\n    }\n  };\n\n  return (\n    <div style={{ \n      position: 'relative',\n      display: 'flex',\n      gap: '20px',\n      margin: '25px'\n    }}>\n      {/* Suggestions Panel - Always visible */}\n      <div style={{\n        width: '15%',\n        border: '1px solid black',\n        borderRadius: '4px',\n        backgroundColor: 'white',\n        height: '400px',\n        overflowY: 'auto'\n      }}>\n        {showSuggestions && filteredSuggestions.length > 0 ? (\n          filteredSuggestions.map((variable, index) => (\n            <div\n              key={variable._id}\n              onClick={() => insertSuggestion(variable)}\n              style={{\n                padding: '8px 10px',\n                cursor: 'pointer',\n                backgroundColor: index === selectedIndex ? '#f0f0f0' : 'white',\n                color: getVariableColor(variable.type),\n                borderBottom: '1px solid #eee'\n              }}\n            >\n              {variable.name}\n            </div>\n          ))\n        ) : (\n          <div style={{ padding: '8px 10px', color: '#666' }}>\n            {currentWord ? 'No matches found' : 'Start typing to see suggestions'}\n          </div>\n        )}\n      </div>\n\n      {/* Main Editor Area */}\n      <div style={{ flex: 1, display: 'flex', flexDirection: 'column' }}>\n        <div \n          ref={editorRef}\n          contentEditable={true}\n          onInput={handleInputChange}\n          onKeyDown={handleKeyDown}\n          style={{\n            border: '1px solid black',\n            borderRadius: '4px',\n            height: '400px',\n            overflowY: 'auto',\n            padding: '10px',\n            whiteSpace: 'pre-wrap',\n            fontFamily: 'Times New Roman',\n            backgroundColor: 'white',\n            marginBottom: '10px'\n          }}\n        />\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'flex-start'\n        }}>\n          <button \n            onClick={handleCopyCode}\n            style={{\n              padding: '6px 12px',\n              backgroundColor: copySuccess ? '#28A745' : '#cccccc',\n              color: 'black',\n              border: '3px solid black',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            }}\n          >\n            {copySuccess ? 'Copied!' : 'Copy Code'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}