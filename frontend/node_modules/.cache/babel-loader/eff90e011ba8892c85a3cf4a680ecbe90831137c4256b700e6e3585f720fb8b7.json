{"ast":null,"code":"var _jsxFileName = \"/Users/andrewhellquist/Desktop/Cursor/my-bi-editor/frontend/src/components/CodeEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CodeEditor({\n  code,\n  setCode,\n  variables,\n  selectedPID\n}) {\n  _s();\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [cursorPosition, setCursorPosition] = useState(0);\n  const [currentWord, setCurrentWord] = useState('');\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [filteredSuggestions, setFilteredSuggestions] = useState([]);\n  const [copySuccess, setCopySuccess] = useState(false);\n  const editorRef = useRef(null);\n\n  // Helper function to get color based on variable type\n  const getVariableColor = type => {\n    switch (type) {\n      case 'Metric':\n        return '#4CAF50';\n      // green\n      case 'Attribute':\n        return '#9C27B0';\n      // purple\n      case 'Attribute Value':\n        return '#FF9800';\n      // orange\n      default:\n        return 'black';\n    }\n  };\n\n  // Debug logging for selectedPID\n  useEffect(() => {\n    console.log('Selected PID:', selectedPID);\n  }, [selectedPID]);\n\n  // Add debugging for selectedPID\n  useEffect(() => {\n    console.log('CodeEditor received selectedPID:', selectedPID);\n  }, [selectedPID]);\n  const getVariableReference = variable => {\n    if (!selectedPID) {\n      console.warn('No PID selected');\n      return '';\n    }\n\n    // Debug the incoming data\n    console.log('Creating reference with:', {\n      variable,\n      selectedPID,\n      pidId: selectedPID.pidId || selectedPID.pid,\n      variableValue: variable.value\n    });\n\n    // Get the PID identifier\n    const pidIdentifier = selectedPID.pidId || selectedPID.pid;\n    if (!pidIdentifier) {\n      console.error('No valid PID identifier found');\n      return '';\n    }\n\n    // Build the reference string\n    let reference;\n    if (variable.type === 'Attribute Value') {\n      reference = `[/gdc/md/${pidIdentifier}/obj/${variable.value}/elements?id=${variable.elementId}]`;\n    } else {\n      reference = `[/gdc/md/${pidIdentifier}/obj/${variable.value}]`;\n    }\n    console.log('Generated reference:', reference);\n    return reference;\n  };\n  useEffect(() => {\n    const filtered = variables.filter(v => v.name.toLowerCase().includes(currentWord.toLowerCase()));\n    setFilteredSuggestions(filtered);\n    setSelectedIndex(0);\n  }, [currentWord, variables]);\n  const handleInputChange = e => {\n    // Store the HTML content\n    setCode(editorRef.current.innerHTML);\n\n    // Get the current text and cursor position\n    const selection = window.getSelection();\n    if (!selection.rangeCount) return;\n    const range = selection.getRangeAt(0);\n    const textNode = range.startContainer;\n    if (textNode.nodeType === Node.TEXT_NODE) {\n      const text = textNode.textContent;\n      const cursorPos = range.startOffset;\n\n      // Find the word being typed\n      const beforeCursor = text.substring(0, cursorPos);\n      const wordMatch = beforeCursor.match(/\\S+$/);\n      const currentTypedWord = wordMatch ? wordMatch[0] : '';\n      console.log('Typing word:', currentTypedWord);\n      setCurrentWord(currentTypedWord);\n      setShowSuggestions(currentTypedWord.length > 0);\n      setCursorPosition(cursorPos);\n    }\n  };\n  const insertSuggestion = variable => {\n    const selection = window.getSelection();\n    if (!selection.rangeCount) return;\n    const range = selection.getRangeAt(0);\n    const textNode = range.startContainer;\n    if (textNode.nodeType === Node.TEXT_NODE) {\n      const text = textNode.textContent;\n      const cursorPos = range.startOffset;\n      const beforeCursor = text.substring(0, cursorPos);\n      const afterCursor = text.substring(cursorPos);\n      const wordMatch = beforeCursor.match(/\\S+$/);\n      if (wordMatch) {\n        const wordStart = cursorPos - wordMatch[0].length;\n        const beforeWord = text.substring(0, wordStart);\n\n        // Create the nodes\n        const beforeTextNode = document.createTextNode(beforeWord);\n        const afterTextNode = document.createTextNode(' '); // Add space after variable\n        const remainingTextNode = document.createTextNode(afterCursor);\n\n        // Create the variable span\n        const variableSpan = document.createElement('span');\n        variableSpan.className = 'variable-reference';\n        variableSpan.style.color = getVariableColor(variable.type);\n        variableSpan.setAttribute('data-reference', getVariableReference(variable));\n        variableSpan.textContent = variable.name;\n\n        // Get the parent node (either the editor div or a text node)\n        const parentNode = textNode.parentNode;\n\n        // Clear existing content and insert new nodes\n        parentNode.replaceChild(beforeTextNode, textNode);\n        parentNode.insertBefore(variableSpan, beforeTextNode.nextSibling);\n        parentNode.insertBefore(afterTextNode, variableSpan.nextSibling);\n        parentNode.insertBefore(remainingTextNode, afterTextNode.nextSibling);\n\n        // Set cursor position after the span and space\n        const newRange = document.createRange();\n        newRange.setStartAfter(afterTextNode);\n        newRange.collapse(true);\n        selection.removeAllRanges();\n        selection.addRange(newRange);\n        setCode(editorRef.current.innerHTML);\n      }\n    }\n    setShowSuggestions(false);\n  };\n  const handleCopyCode = () => {\n    if (!editorRef.current) return;\n    console.log('Starting copy operation...');\n\n    // Create a temporary div to manipulate the content\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = editorRef.current.innerHTML;\n    console.log('Initial HTML:', tempDiv.innerHTML);\n    console.log('Initial text:', tempDiv.textContent);\n\n    // Get all variable spans and log them\n    const spans = Array.from(tempDiv.getElementsByClassName('variable-reference'));\n    console.log('Found spans:', spans.length);\n\n    // Process spans in reverse order to maintain correct positions\n    spans.reverse().forEach((span, index) => {\n      const reference = span.getAttribute('data-reference');\n      const visibleText = span.textContent;\n      console.log(`Processing span ${index}:`, {\n        visibleText,\n        reference,\n        innerHTML: span.innerHTML\n      });\n      if (reference) {\n        // Create a text node with the reference\n        const referenceNode = document.createTextNode(reference);\n        // Replace the span with the reference while preserving surrounding text\n        span.parentNode.replaceChild(referenceNode, span);\n      }\n    });\n\n    // Get the final text with preserved spacing and non-variable content\n    const finalText = tempDiv.textContent;\n    console.log('Final text to copy:', finalText);\n    navigator.clipboard.writeText(finalText).then(() => {\n      setCopySuccess(true);\n      setTimeout(() => setCopySuccess(false), 2000);\n    });\n  };\n  const handleKeyDown = e => {\n    if (!showSuggestions || !filteredSuggestions.length) return;\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setSelectedIndex(prev => prev < filteredSuggestions.length - 1 ? prev + 1 : prev);\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setSelectedIndex(prev => prev > 0 ? prev - 1 : prev);\n        break;\n      case 'Tab':\n      case 'Enter':\n        e.preventDefault();\n        if (filteredSuggestions[selectedIndex]) {\n          insertSuggestion(filteredSuggestions[selectedIndex]);\n        }\n        break;\n      case 'Escape':\n        setShowSuggestions(false);\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        marginBottom: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCopyCode,\n        children: copySuccess ? 'Copied!' : 'Copy Code'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: editorRef,\n      contentEditable: true,\n      onInput: handleInputChange,\n      onKeyDown: handleKeyDown,\n      style: {\n        border: '1px solid #ccc',\n        minHeight: '200px',\n        padding: '10px',\n        whiteSpace: 'pre-wrap',\n        fontFamily: 'monospace'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), showSuggestions && filteredSuggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '100%',\n        left: 0,\n        backgroundColor: 'white',\n        border: '1px solid #ccc',\n        maxHeight: '200px',\n        overflowY: 'auto',\n        width: '200px',\n        zIndex: 1000\n      },\n      children: filteredSuggestions.map((variable, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => insertSuggestion(variable),\n        style: {\n          padding: '5px 10px',\n          cursor: 'pointer',\n          backgroundColor: index === selectedIndex ? '#f0f0f0' : 'white',\n          color: getVariableColor(variable.type)\n        },\n        children: variable.name\n      }, variable._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n}\n_s(CodeEditor, \"Hcr6Dor3VOseailz0J2giijL+K4=\");\n_c = CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","CodeEditor","code","setCode","variables","selectedPID","_s","showSuggestions","setShowSuggestions","cursorPosition","setCursorPosition","currentWord","setCurrentWord","selectedIndex","setSelectedIndex","filteredSuggestions","setFilteredSuggestions","copySuccess","setCopySuccess","editorRef","getVariableColor","type","console","log","getVariableReference","variable","warn","pidId","pid","variableValue","value","pidIdentifier","error","reference","elementId","filtered","filter","v","name","toLowerCase","includes","handleInputChange","e","current","innerHTML","selection","window","getSelection","rangeCount","range","getRangeAt","textNode","startContainer","nodeType","Node","TEXT_NODE","text","textContent","cursorPos","startOffset","beforeCursor","substring","wordMatch","match","currentTypedWord","length","insertSuggestion","afterCursor","wordStart","beforeWord","beforeTextNode","document","createTextNode","afterTextNode","remainingTextNode","variableSpan","createElement","className","style","color","setAttribute","parentNode","replaceChild","insertBefore","nextSibling","newRange","createRange","setStartAfter","collapse","removeAllRanges","addRange","handleCopyCode","tempDiv","spans","Array","from","getElementsByClassName","reverse","forEach","span","index","getAttribute","visibleText","referenceNode","finalText","navigator","clipboard","writeText","then","setTimeout","handleKeyDown","key","preventDefault","prev","position","children","display","justifyContent","marginBottom","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","contentEditable","onInput","onKeyDown","border","minHeight","padding","whiteSpace","fontFamily","top","left","backgroundColor","maxHeight","overflowY","width","zIndex","map","cursor","_id","_c","$RefreshReg$"],"sources":["/Users/andrewhellquist/Desktop/Cursor/my-bi-editor/frontend/src/components/CodeEditor.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nexport default function CodeEditor({ code, setCode, variables, selectedPID }) {\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [cursorPosition, setCursorPosition] = useState(0);\n  const [currentWord, setCurrentWord] = useState('');\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [filteredSuggestions, setFilteredSuggestions] = useState([]);\n  const [copySuccess, setCopySuccess] = useState(false);\n  const editorRef = useRef(null);\n\n  // Helper function to get color based on variable type\n  const getVariableColor = (type) => {\n    switch (type) {\n      case 'Metric':\n        return '#4CAF50'; // green\n      case 'Attribute':\n        return '#9C27B0'; // purple\n      case 'Attribute Value':\n        return '#FF9800'; // orange\n      default:\n        return 'black';\n    }\n  };\n\n  // Debug logging for selectedPID\n  useEffect(() => {\n    console.log('Selected PID:', selectedPID);\n  }, [selectedPID]);\n\n  // Add debugging for selectedPID\n  useEffect(() => {\n    console.log('CodeEditor received selectedPID:', selectedPID);\n  }, [selectedPID]);\n\n  const getVariableReference = (variable) => {\n    if (!selectedPID) {\n      console.warn('No PID selected');\n      return '';\n    }\n    \n    // Debug the incoming data\n    console.log('Creating reference with:', {\n      variable,\n      selectedPID,\n      pidId: selectedPID.pidId || selectedPID.pid,\n      variableValue: variable.value\n    });\n    \n    // Get the PID identifier\n    const pidIdentifier = selectedPID.pidId || selectedPID.pid;\n    if (!pidIdentifier) {\n      console.error('No valid PID identifier found');\n      return '';\n    }\n\n    // Build the reference string\n    let reference;\n    if (variable.type === 'Attribute Value') {\n      reference = `[/gdc/md/${pidIdentifier}/obj/${variable.value}/elements?id=${variable.elementId}]`;\n    } else {\n      reference = `[/gdc/md/${pidIdentifier}/obj/${variable.value}]`;\n    }\n\n    console.log('Generated reference:', reference);\n    return reference;\n  };\n\n  useEffect(() => {\n    const filtered = variables.filter(v => \n      v.name.toLowerCase().includes(currentWord.toLowerCase())\n    );\n    setFilteredSuggestions(filtered);\n    setSelectedIndex(0);\n  }, [currentWord, variables]);\n\n  const handleInputChange = (e) => {\n    // Store the HTML content\n    setCode(editorRef.current.innerHTML);\n\n    // Get the current text and cursor position\n    const selection = window.getSelection();\n    if (!selection.rangeCount) return;\n\n    const range = selection.getRangeAt(0);\n    const textNode = range.startContainer;\n\n    if (textNode.nodeType === Node.TEXT_NODE) {\n      const text = textNode.textContent;\n      const cursorPos = range.startOffset;\n      \n      // Find the word being typed\n      const beforeCursor = text.substring(0, cursorPos);\n      const wordMatch = beforeCursor.match(/\\S+$/);\n      const currentTypedWord = wordMatch ? wordMatch[0] : '';\n      \n      console.log('Typing word:', currentTypedWord);\n      setCurrentWord(currentTypedWord);\n      setShowSuggestions(currentTypedWord.length > 0);\n      setCursorPosition(cursorPos);\n    }\n  };\n\n  const insertSuggestion = (variable) => {\n    const selection = window.getSelection();\n    if (!selection.rangeCount) return;\n\n    const range = selection.getRangeAt(0);\n    const textNode = range.startContainer;\n\n    if (textNode.nodeType === Node.TEXT_NODE) {\n      const text = textNode.textContent;\n      const cursorPos = range.startOffset;\n      const beforeCursor = text.substring(0, cursorPos);\n      const afterCursor = text.substring(cursorPos);\n      const wordMatch = beforeCursor.match(/\\S+$/);\n\n      if (wordMatch) {\n        const wordStart = cursorPos - wordMatch[0].length;\n        const beforeWord = text.substring(0, wordStart);\n\n        // Create the nodes\n        const beforeTextNode = document.createTextNode(beforeWord);\n        const afterTextNode = document.createTextNode(' '); // Add space after variable\n        const remainingTextNode = document.createTextNode(afterCursor);\n        \n        // Create the variable span\n        const variableSpan = document.createElement('span');\n        variableSpan.className = 'variable-reference';\n        variableSpan.style.color = getVariableColor(variable.type);\n        variableSpan.setAttribute('data-reference', getVariableReference(variable));\n        variableSpan.textContent = variable.name;\n\n        // Get the parent node (either the editor div or a text node)\n        const parentNode = textNode.parentNode;\n        \n        // Clear existing content and insert new nodes\n        parentNode.replaceChild(beforeTextNode, textNode);\n        parentNode.insertBefore(variableSpan, beforeTextNode.nextSibling);\n        parentNode.insertBefore(afterTextNode, variableSpan.nextSibling);\n        parentNode.insertBefore(remainingTextNode, afterTextNode.nextSibling);\n\n        // Set cursor position after the span and space\n        const newRange = document.createRange();\n        newRange.setStartAfter(afterTextNode);\n        newRange.collapse(true);\n        selection.removeAllRanges();\n        selection.addRange(newRange);\n\n        setCode(editorRef.current.innerHTML);\n      }\n    }\n    setShowSuggestions(false);\n  };\n\n  const handleCopyCode = () => {\n    if (!editorRef.current) return;\n    console.log('Starting copy operation...');\n\n    // Create a temporary div to manipulate the content\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = editorRef.current.innerHTML;\n    console.log('Initial HTML:', tempDiv.innerHTML);\n    console.log('Initial text:', tempDiv.textContent);\n\n    // Get all variable spans and log them\n    const spans = Array.from(tempDiv.getElementsByClassName('variable-reference'));\n    console.log('Found spans:', spans.length);\n    \n    // Process spans in reverse order to maintain correct positions\n    spans.reverse().forEach((span, index) => {\n      const reference = span.getAttribute('data-reference');\n      const visibleText = span.textContent;\n      console.log(`Processing span ${index}:`, {\n        visibleText,\n        reference,\n        innerHTML: span.innerHTML\n      });\n\n      if (reference) {\n        // Create a text node with the reference\n        const referenceNode = document.createTextNode(reference);\n        // Replace the span with the reference while preserving surrounding text\n        span.parentNode.replaceChild(referenceNode, span);\n      }\n    });\n\n    // Get the final text with preserved spacing and non-variable content\n    const finalText = tempDiv.textContent;\n    console.log('Final text to copy:', finalText);\n\n    navigator.clipboard.writeText(finalText).then(() => {\n      setCopySuccess(true);\n      setTimeout(() => setCopySuccess(false), 2000);\n    });\n  };\n\n  const handleKeyDown = (e) => {\n    if (!showSuggestions || !filteredSuggestions.length) return;\n\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setSelectedIndex(prev => \n          prev < filteredSuggestions.length - 1 ? prev + 1 : prev\n        );\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setSelectedIndex(prev => prev > 0 ? prev - 1 : prev);\n        break;\n      case 'Tab':\n      case 'Enter':\n        e.preventDefault();\n        if (filteredSuggestions[selectedIndex]) {\n          insertSuggestion(filteredSuggestions[selectedIndex]);\n        }\n        break;\n      case 'Escape':\n        setShowSuggestions(false);\n        break;\n    }\n  };\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '10px' }}>\n        <button onClick={handleCopyCode}>\n          {copySuccess ? 'Copied!' : 'Copy Code'}\n        </button>\n      </div>\n      <div \n        ref={editorRef}\n        contentEditable={true}\n        onInput={handleInputChange}\n        onKeyDown={handleKeyDown}\n        style={{\n          border: '1px solid #ccc',\n          minHeight: '200px',\n          padding: '10px',\n          whiteSpace: 'pre-wrap',\n          fontFamily: 'monospace'\n        }}\n      />\n      {showSuggestions && filteredSuggestions.length > 0 && (\n        <div style={{\n          position: 'absolute',\n          top: '100%',\n          left: 0,\n          backgroundColor: 'white',\n          border: '1px solid #ccc',\n          maxHeight: '200px',\n          overflowY: 'auto',\n          width: '200px',\n          zIndex: 1000\n        }}>\n          {filteredSuggestions.map((variable, index) => (\n            <div\n              key={variable._id}\n              onClick={() => insertSuggestion(variable)}\n              style={{\n                padding: '5px 10px',\n                cursor: 'pointer',\n                backgroundColor: index === selectedIndex ? '#f0f0f0' : 'white',\n                color: getVariableColor(variable.type)\n              }}\n            >\n              {variable.name}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,eAAe,SAASC,UAAUA,CAAC;EAAEC,IAAI;EAAEC,OAAO;EAAEC,SAAS;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EAC5E,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACa,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACiB,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACmB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAClE,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMuB,SAAS,GAAGrB,MAAM,CAAC,IAAI,CAAC;;EAE9B;EACA,MAAMsB,gBAAgB,GAAIC,IAAI,IAAK;IACjC,QAAQA,IAAI;MACV,KAAK,QAAQ;QACX,OAAO,SAAS;MAAE;MACpB,KAAK,WAAW;QACd,OAAO,SAAS;MAAE;MACpB,KAAK,iBAAiB;QACpB,OAAO,SAAS;MAAE;MACpB;QACE,OAAO,OAAO;IAClB;EACF,CAAC;;EAED;EACAxB,SAAS,CAAC,MAAM;IACdyB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAElB,WAAW,CAAC;EAC3C,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;;EAEjB;EACAR,SAAS,CAAC,MAAM;IACdyB,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAElB,WAAW,CAAC;EAC9D,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,MAAMmB,oBAAoB,GAAIC,QAAQ,IAAK;IACzC,IAAI,CAACpB,WAAW,EAAE;MAChBiB,OAAO,CAACI,IAAI,CAAC,iBAAiB,CAAC;MAC/B,OAAO,EAAE;IACX;;IAEA;IACAJ,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAE;MACtCE,QAAQ;MACRpB,WAAW;MACXsB,KAAK,EAAEtB,WAAW,CAACsB,KAAK,IAAItB,WAAW,CAACuB,GAAG;MAC3CC,aAAa,EAAEJ,QAAQ,CAACK;IAC1B,CAAC,CAAC;;IAEF;IACA,MAAMC,aAAa,GAAG1B,WAAW,CAACsB,KAAK,IAAItB,WAAW,CAACuB,GAAG;IAC1D,IAAI,CAACG,aAAa,EAAE;MAClBT,OAAO,CAACU,KAAK,CAAC,+BAA+B,CAAC;MAC9C,OAAO,EAAE;IACX;;IAEA;IACA,IAAIC,SAAS;IACb,IAAIR,QAAQ,CAACJ,IAAI,KAAK,iBAAiB,EAAE;MACvCY,SAAS,GAAG,YAAYF,aAAa,QAAQN,QAAQ,CAACK,KAAK,gBAAgBL,QAAQ,CAACS,SAAS,GAAG;IAClG,CAAC,MAAM;MACLD,SAAS,GAAG,YAAYF,aAAa,QAAQN,QAAQ,CAACK,KAAK,GAAG;IAChE;IAEAR,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEU,SAAS,CAAC;IAC9C,OAAOA,SAAS;EAClB,CAAC;EAEDpC,SAAS,CAAC,MAAM;IACd,MAAMsC,QAAQ,GAAG/B,SAAS,CAACgC,MAAM,CAACC,CAAC,IACjCA,CAAC,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC7B,WAAW,CAAC4B,WAAW,CAAC,CAAC,CACzD,CAAC;IACDvB,sBAAsB,CAACmB,QAAQ,CAAC;IAChCrB,gBAAgB,CAAC,CAAC,CAAC;EACrB,CAAC,EAAE,CAACH,WAAW,EAAEP,SAAS,CAAC,CAAC;EAE5B,MAAMqC,iBAAiB,GAAIC,CAAC,IAAK;IAC/B;IACAvC,OAAO,CAACgB,SAAS,CAACwB,OAAO,CAACC,SAAS,CAAC;;IAEpC;IACA,MAAMC,SAAS,GAAGC,MAAM,CAACC,YAAY,CAAC,CAAC;IACvC,IAAI,CAACF,SAAS,CAACG,UAAU,EAAE;IAE3B,MAAMC,KAAK,GAAGJ,SAAS,CAACK,UAAU,CAAC,CAAC,CAAC;IACrC,MAAMC,QAAQ,GAAGF,KAAK,CAACG,cAAc;IAErC,IAAID,QAAQ,CAACE,QAAQ,KAAKC,IAAI,CAACC,SAAS,EAAE;MACxC,MAAMC,IAAI,GAAGL,QAAQ,CAACM,WAAW;MACjC,MAAMC,SAAS,GAAGT,KAAK,CAACU,WAAW;;MAEnC;MACA,MAAMC,YAAY,GAAGJ,IAAI,CAACK,SAAS,CAAC,CAAC,EAAEH,SAAS,CAAC;MACjD,MAAMI,SAAS,GAAGF,YAAY,CAACG,KAAK,CAAC,MAAM,CAAC;MAC5C,MAAMC,gBAAgB,GAAGF,SAAS,GAAGA,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;MAEtDxC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEyC,gBAAgB,CAAC;MAC7CpD,cAAc,CAACoD,gBAAgB,CAAC;MAChCxD,kBAAkB,CAACwD,gBAAgB,CAACC,MAAM,GAAG,CAAC,CAAC;MAC/CvD,iBAAiB,CAACgD,SAAS,CAAC;IAC9B;EACF,CAAC;EAED,MAAMQ,gBAAgB,GAAIzC,QAAQ,IAAK;IACrC,MAAMoB,SAAS,GAAGC,MAAM,CAACC,YAAY,CAAC,CAAC;IACvC,IAAI,CAACF,SAAS,CAACG,UAAU,EAAE;IAE3B,MAAMC,KAAK,GAAGJ,SAAS,CAACK,UAAU,CAAC,CAAC,CAAC;IACrC,MAAMC,QAAQ,GAAGF,KAAK,CAACG,cAAc;IAErC,IAAID,QAAQ,CAACE,QAAQ,KAAKC,IAAI,CAACC,SAAS,EAAE;MACxC,MAAMC,IAAI,GAAGL,QAAQ,CAACM,WAAW;MACjC,MAAMC,SAAS,GAAGT,KAAK,CAACU,WAAW;MACnC,MAAMC,YAAY,GAAGJ,IAAI,CAACK,SAAS,CAAC,CAAC,EAAEH,SAAS,CAAC;MACjD,MAAMS,WAAW,GAAGX,IAAI,CAACK,SAAS,CAACH,SAAS,CAAC;MAC7C,MAAMI,SAAS,GAAGF,YAAY,CAACG,KAAK,CAAC,MAAM,CAAC;MAE5C,IAAID,SAAS,EAAE;QACb,MAAMM,SAAS,GAAGV,SAAS,GAAGI,SAAS,CAAC,CAAC,CAAC,CAACG,MAAM;QACjD,MAAMI,UAAU,GAAGb,IAAI,CAACK,SAAS,CAAC,CAAC,EAAEO,SAAS,CAAC;;QAE/C;QACA,MAAME,cAAc,GAAGC,QAAQ,CAACC,cAAc,CAACH,UAAU,CAAC;QAC1D,MAAMI,aAAa,GAAGF,QAAQ,CAACC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;QACpD,MAAME,iBAAiB,GAAGH,QAAQ,CAACC,cAAc,CAACL,WAAW,CAAC;;QAE9D;QACA,MAAMQ,YAAY,GAAGJ,QAAQ,CAACK,aAAa,CAAC,MAAM,CAAC;QACnDD,YAAY,CAACE,SAAS,GAAG,oBAAoB;QAC7CF,YAAY,CAACG,KAAK,CAACC,KAAK,GAAG3D,gBAAgB,CAACK,QAAQ,CAACJ,IAAI,CAAC;QAC1DsD,YAAY,CAACK,YAAY,CAAC,gBAAgB,EAAExD,oBAAoB,CAACC,QAAQ,CAAC,CAAC;QAC3EkD,YAAY,CAAClB,WAAW,GAAGhC,QAAQ,CAACa,IAAI;;QAExC;QACA,MAAM2C,UAAU,GAAG9B,QAAQ,CAAC8B,UAAU;;QAEtC;QACAA,UAAU,CAACC,YAAY,CAACZ,cAAc,EAAEnB,QAAQ,CAAC;QACjD8B,UAAU,CAACE,YAAY,CAACR,YAAY,EAAEL,cAAc,CAACc,WAAW,CAAC;QACjEH,UAAU,CAACE,YAAY,CAACV,aAAa,EAAEE,YAAY,CAACS,WAAW,CAAC;QAChEH,UAAU,CAACE,YAAY,CAACT,iBAAiB,EAAED,aAAa,CAACW,WAAW,CAAC;;QAErE;QACA,MAAMC,QAAQ,GAAGd,QAAQ,CAACe,WAAW,CAAC,CAAC;QACvCD,QAAQ,CAACE,aAAa,CAACd,aAAa,CAAC;QACrCY,QAAQ,CAACG,QAAQ,CAAC,IAAI,CAAC;QACvB3C,SAAS,CAAC4C,eAAe,CAAC,CAAC;QAC3B5C,SAAS,CAAC6C,QAAQ,CAACL,QAAQ,CAAC;QAE5BlF,OAAO,CAACgB,SAAS,CAACwB,OAAO,CAACC,SAAS,CAAC;MACtC;IACF;IACApC,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,MAAMmF,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAACxE,SAAS,CAACwB,OAAO,EAAE;IACxBrB,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;;IAEzC;IACA,MAAMqE,OAAO,GAAGrB,QAAQ,CAACK,aAAa,CAAC,KAAK,CAAC;IAC7CgB,OAAO,CAAChD,SAAS,GAAGzB,SAAS,CAACwB,OAAO,CAACC,SAAS;IAC/CtB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEqE,OAAO,CAAChD,SAAS,CAAC;IAC/CtB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEqE,OAAO,CAACnC,WAAW,CAAC;;IAEjD;IACA,MAAMoC,KAAK,GAAGC,KAAK,CAACC,IAAI,CAACH,OAAO,CAACI,sBAAsB,CAAC,oBAAoB,CAAC,CAAC;IAC9E1E,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEsE,KAAK,CAAC5B,MAAM,CAAC;;IAEzC;IACA4B,KAAK,CAACI,OAAO,CAAC,CAAC,CAACC,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MACvC,MAAMnE,SAAS,GAAGkE,IAAI,CAACE,YAAY,CAAC,gBAAgB,CAAC;MACrD,MAAMC,WAAW,GAAGH,IAAI,CAAC1C,WAAW;MACpCnC,OAAO,CAACC,GAAG,CAAC,mBAAmB6E,KAAK,GAAG,EAAE;QACvCE,WAAW;QACXrE,SAAS;QACTW,SAAS,EAAEuD,IAAI,CAACvD;MAClB,CAAC,CAAC;MAEF,IAAIX,SAAS,EAAE;QACb;QACA,MAAMsE,aAAa,GAAGhC,QAAQ,CAACC,cAAc,CAACvC,SAAS,CAAC;QACxD;QACAkE,IAAI,CAAClB,UAAU,CAACC,YAAY,CAACqB,aAAa,EAAEJ,IAAI,CAAC;MACnD;IACF,CAAC,CAAC;;IAEF;IACA,MAAMK,SAAS,GAAGZ,OAAO,CAACnC,WAAW;IACrCnC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEiF,SAAS,CAAC;IAE7CC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACH,SAAS,CAAC,CAACI,IAAI,CAAC,MAAM;MAClD1F,cAAc,CAAC,IAAI,CAAC;MACpB2F,UAAU,CAAC,MAAM3F,cAAc,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;IAC/C,CAAC,CAAC;EACJ,CAAC;EAED,MAAM4F,aAAa,GAAIpE,CAAC,IAAK;IAC3B,IAAI,CAACnC,eAAe,IAAI,CAACQ,mBAAmB,CAACkD,MAAM,EAAE;IAErD,QAAQvB,CAAC,CAACqE,GAAG;MACX,KAAK,WAAW;QACdrE,CAAC,CAACsE,cAAc,CAAC,CAAC;QAClBlG,gBAAgB,CAACmG,IAAI,IACnBA,IAAI,GAAGlG,mBAAmB,CAACkD,MAAM,GAAG,CAAC,GAAGgD,IAAI,GAAG,CAAC,GAAGA,IACrD,CAAC;QACD;MACF,KAAK,SAAS;QACZvE,CAAC,CAACsE,cAAc,CAAC,CAAC;QAClBlG,gBAAgB,CAACmG,IAAI,IAAIA,IAAI,GAAG,CAAC,GAAGA,IAAI,GAAG,CAAC,GAAGA,IAAI,CAAC;QACpD;MACF,KAAK,KAAK;MACV,KAAK,OAAO;QACVvE,CAAC,CAACsE,cAAc,CAAC,CAAC;QAClB,IAAIjG,mBAAmB,CAACF,aAAa,CAAC,EAAE;UACtCqD,gBAAgB,CAACnD,mBAAmB,CAACF,aAAa,CAAC,CAAC;QACtD;QACA;MACF,KAAK,QAAQ;QACXL,kBAAkB,CAAC,KAAK,CAAC;QACzB;IACJ;EACF,CAAC;EAED,oBACER,OAAA;IAAK8E,KAAK,EAAE;MAAEoC,QAAQ,EAAE;IAAW,CAAE;IAAAC,QAAA,gBACnCnH,OAAA;MAAK8E,KAAK,EAAE;QAAEsC,OAAO,EAAE,MAAM;QAAEC,cAAc,EAAE,UAAU;QAAEC,YAAY,EAAE;MAAO,CAAE;MAAAH,QAAA,eAChFnH,OAAA;QAAQuH,OAAO,EAAE5B,cAAe;QAAAwB,QAAA,EAC7BlG,WAAW,GAAG,SAAS,GAAG;MAAW;QAAAuG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACN3H,OAAA;MACE4H,GAAG,EAAEzG,SAAU;MACf0G,eAAe,EAAE,IAAK;MACtBC,OAAO,EAAErF,iBAAkB;MAC3BsF,SAAS,EAAEjB,aAAc;MACzBhC,KAAK,EAAE;QACLkD,MAAM,EAAE,gBAAgB;QACxBC,SAAS,EAAE,OAAO;QAClBC,OAAO,EAAE,MAAM;QACfC,UAAU,EAAE,UAAU;QACtBC,UAAU,EAAE;MACd;IAAE;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EACDpH,eAAe,IAAIQ,mBAAmB,CAACkD,MAAM,GAAG,CAAC,iBAChDjE,OAAA;MAAK8E,KAAK,EAAE;QACVoC,QAAQ,EAAE,UAAU;QACpBmB,GAAG,EAAE,MAAM;QACXC,IAAI,EAAE,CAAC;QACPC,eAAe,EAAE,OAAO;QACxBP,MAAM,EAAE,gBAAgB;QACxBQ,SAAS,EAAE,OAAO;QAClBC,SAAS,EAAE,MAAM;QACjBC,KAAK,EAAE,OAAO;QACdC,MAAM,EAAE;MACV,CAAE;MAAAxB,QAAA,EACCpG,mBAAmB,CAAC6H,GAAG,CAAC,CAACnH,QAAQ,EAAE2E,KAAK,kBACvCpG,OAAA;QAEEuH,OAAO,EAAEA,CAAA,KAAMrD,gBAAgB,CAACzC,QAAQ,CAAE;QAC1CqD,KAAK,EAAE;UACLoD,OAAO,EAAE,UAAU;UACnBW,MAAM,EAAE,SAAS;UACjBN,eAAe,EAAEnC,KAAK,KAAKvF,aAAa,GAAG,SAAS,GAAG,OAAO;UAC9DkE,KAAK,EAAE3D,gBAAgB,CAACK,QAAQ,CAACJ,IAAI;QACvC,CAAE;QAAA8F,QAAA,EAED1F,QAAQ,CAACa;MAAI,GATTb,QAAQ,CAACqH,GAAG;QAAAtB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUd,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACrH,EAAA,CAhRuBL,UAAU;AAAA8I,EAAA,GAAV9I,UAAU;AAAA,IAAA8I,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}