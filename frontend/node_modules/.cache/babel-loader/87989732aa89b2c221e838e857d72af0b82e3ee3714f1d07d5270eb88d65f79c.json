{"ast":null,"code":"var _jsxFileName = \"/Users/andrewhellquist/Desktop/Cursor/my-bi-editor/frontend/src/components/CodeEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CodeEditor({\n  code,\n  setCode,\n  variables,\n  selectedPID\n}) {\n  _s();\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [cursorPosition, setCursorPosition] = useState(0);\n  const [currentWord, setCurrentWord] = useState('');\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [filteredSuggestions, setFilteredSuggestions] = useState([]);\n  const [copySuccess, setCopySuccess] = useState(false);\n  const editorRef = useRef(null);\n\n  // Helper function to get color based on variable type\n  const getVariableColor = type => {\n    switch (type) {\n      case 'Metric':\n        return '#4CAF50';\n      // green\n      case 'Attribute':\n        return '#9C27B0';\n      // purple\n      case 'Attribute Value':\n        return '#FF9800';\n      // orange\n      default:\n        return 'black';\n    }\n  };\n\n  // Debug logging for selectedPID\n  useEffect(() => {\n    console.log('Selected PID:', selectedPID);\n  }, [selectedPID]);\n\n  // Add debugging for selectedPID\n  useEffect(() => {\n    console.log('CodeEditor received selectedPID:', selectedPID);\n  }, [selectedPID]);\n  const getVariableReference = variable => {\n    if (!selectedPID) {\n      console.warn('No PID selected');\n      return '';\n    }\n\n    // Debug the incoming data\n    console.log('Creating reference with:', {\n      variable,\n      selectedPID,\n      pidId: selectedPID.pidId || selectedPID.pid,\n      variableValue: variable.value\n    });\n\n    // Get the PID identifier\n    const pidIdentifier = selectedPID.pidId || selectedPID.pid;\n    if (!pidIdentifier) {\n      console.error('No valid PID identifier found');\n      return '';\n    }\n\n    // Build the reference string\n    let reference;\n    if (variable.type === 'Attribute Value') {\n      reference = `[/gdc/md/${pidIdentifier}/obj/${variable.value}/elements?id=${variable.elementId}]`;\n    } else {\n      reference = `[/gdc/md/${pidIdentifier}/obj/${variable.value}]`;\n    }\n    console.log('Generated reference:', reference);\n    return reference;\n  };\n  useEffect(() => {\n    const filtered = variables.filter(v => v.name.toLowerCase().includes(currentWord.toLowerCase()));\n    setFilteredSuggestions(filtered);\n    setSelectedIndex(0);\n  }, [currentWord, variables]);\n  const handleInputChange = e => {\n    // Get the current text and cursor position\n    const selection = window.getSelection();\n    if (!selection.rangeCount) return;\n    const range = selection.getRangeAt(0);\n    const textNode = range.startContainer;\n    if (textNode.nodeType === Node.TEXT_NODE) {\n      const text = textNode.textContent;\n      const cursorPos = range.startOffset;\n\n      // Find the word being typed\n      const beforeCursor = text.substring(0, cursorPos);\n      const wordMatch = beforeCursor.match(/\\S+$/);\n      const currentTypedWord = wordMatch ? wordMatch[0] : '';\n      console.log('Typing word:', currentTypedWord);\n      setCurrentWord(currentTypedWord);\n      setShowSuggestions(currentTypedWord.length > 0);\n      setCursorPosition(cursorPos);\n    }\n  };\n  const insertSuggestion = variable => {\n    const selection = window.getSelection();\n    if (!selection.rangeCount) return;\n    const range = selection.getRangeAt(0);\n    const textNode = range.startContainer;\n    if (textNode.nodeType === Node.TEXT_NODE) {\n      const text = textNode.textContent;\n      const cursorPos = range.startOffset;\n      const beforeCursor = text.substring(0, cursorPos);\n      const afterCursor = text.substring(cursorPos);\n      const wordMatch = beforeCursor.match(/\\S+$/);\n      if (wordMatch) {\n        // Calculate positions\n        const wordStart = cursorPos - wordMatch[0].length;\n        const beforeWord = text.substring(0, wordStart);\n\n        // Create the reference\n        const variableRef = getVariableReference(variable);\n        const styledSpan = document.createElement('span');\n        styledSpan.style.color = getVariableColor(variable.type);\n        styledSpan.setAttribute('data-reference', variableRef);\n        styledSpan.textContent = variableRef;\n\n        // Replace content\n        const newText = document.createTextNode(beforeWord + afterCursor);\n        textNode.parentNode.insertBefore(styledSpan, textNode);\n        textNode.textContent = newText.textContent;\n\n        // Move cursor after the span\n        const newRange = document.createRange();\n        newRange.setStartAfter(styledSpan);\n        newRange.collapse(true);\n        selection.removeAllRanges();\n        selection.addRange(newRange);\n      }\n    }\n    setShowSuggestions(false);\n  };\n  const handleCopyCode = () => {\n    if (editorRef.current) {\n      console.log('Starting copy operation...');\n      console.log('Editor HTML:', editorRef.current.innerHTML);\n      const spans = editorRef.current.getElementsByTagName('span');\n      let finalText = editorRef.current.textContent;\n      console.log('Number of spans found:', spans.length);\n      console.log('Initial text:', finalText);\n      Array.from(spans).reverse().forEach((span, index) => {\n        const reference = span.getAttribute('data-reference');\n        const visibleText = span.textContent;\n        console.log(`Processing span ${index}:`, {\n          visibleText,\n          reference,\n          spanHTML: span.outerHTML\n        });\n        if (reference) {\n          const startPos = finalText.indexOf(visibleText);\n          if (startPos !== -1) {\n            finalText = finalText.substring(0, startPos) + reference + finalText.substring(startPos + visibleText.length);\n            console.log(`After replacing span ${index}:`, finalText);\n          }\n        }\n      });\n      console.log('Final text to copy:', finalText);\n      navigator.clipboard.writeText(finalText).then(() => {\n        console.log('Successfully copied to clipboard');\n        setCopySuccess(true);\n        setTimeout(() => setCopySuccess(false), 2000);\n      });\n    }\n  };\n  const handleKeyDown = e => {\n    if (!showSuggestions || !filteredSuggestions.length) return;\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setSelectedIndex(prev => prev < filteredSuggestions.length - 1 ? prev + 1 : prev);\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setSelectedIndex(prev => prev > 0 ? prev - 1 : prev);\n        break;\n      case 'Tab':\n      case 'Enter':\n        e.preventDefault();\n        if (filteredSuggestions[selectedIndex]) {\n          insertSuggestion(filteredSuggestions[selectedIndex]);\n        }\n        break;\n      case 'Escape':\n        setShowSuggestions(false);\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        marginBottom: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCopyCode,\n        children: copySuccess ? 'Copied!' : 'Copy Code'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: editorRef,\n      contentEditable: true,\n      onInput: handleInputChange,\n      onKeyDown: handleKeyDown,\n      style: {\n        border: '1px solid #ccc',\n        minHeight: '200px',\n        padding: '10px',\n        whiteSpace: 'pre-wrap',\n        fontFamily: 'monospace'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), showSuggestions && filteredSuggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '100%',\n        left: 0,\n        backgroundColor: 'white',\n        border: '1px solid #ccc',\n        maxHeight: '200px',\n        overflowY: 'auto',\n        width: '200px',\n        zIndex: 1000\n      },\n      children: filteredSuggestions.map((variable, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => insertSuggestion(variable),\n        style: {\n          padding: '5px 10px',\n          cursor: 'pointer',\n          backgroundColor: index === selectedIndex ? '#f0f0f0' : 'white',\n          color: getVariableColor(variable.type)\n        },\n        children: variable.name\n      }, variable._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this);\n}\n_s(CodeEditor, \"Hcr6Dor3VOseailz0J2giijL+K4=\");\n_c = CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","CodeEditor","code","setCode","variables","selectedPID","_s","showSuggestions","setShowSuggestions","cursorPosition","setCursorPosition","currentWord","setCurrentWord","selectedIndex","setSelectedIndex","filteredSuggestions","setFilteredSuggestions","copySuccess","setCopySuccess","editorRef","getVariableColor","type","console","log","getVariableReference","variable","warn","pidId","pid","variableValue","value","pidIdentifier","error","reference","elementId","filtered","filter","v","name","toLowerCase","includes","handleInputChange","e","selection","window","getSelection","rangeCount","range","getRangeAt","textNode","startContainer","nodeType","Node","TEXT_NODE","text","textContent","cursorPos","startOffset","beforeCursor","substring","wordMatch","match","currentTypedWord","length","insertSuggestion","afterCursor","wordStart","beforeWord","variableRef","styledSpan","document","createElement","style","color","setAttribute","newText","createTextNode","parentNode","insertBefore","newRange","createRange","setStartAfter","collapse","removeAllRanges","addRange","handleCopyCode","current","innerHTML","spans","getElementsByTagName","finalText","Array","from","reverse","forEach","span","index","getAttribute","visibleText","spanHTML","outerHTML","startPos","indexOf","navigator","clipboard","writeText","then","setTimeout","handleKeyDown","key","preventDefault","prev","position","children","display","justifyContent","marginBottom","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","contentEditable","onInput","onKeyDown","border","minHeight","padding","whiteSpace","fontFamily","top","left","backgroundColor","maxHeight","overflowY","width","zIndex","map","cursor","_id","_c","$RefreshReg$"],"sources":["/Users/andrewhellquist/Desktop/Cursor/my-bi-editor/frontend/src/components/CodeEditor.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nexport default function CodeEditor({ code, setCode, variables, selectedPID }) {\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [cursorPosition, setCursorPosition] = useState(0);\n  const [currentWord, setCurrentWord] = useState('');\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [filteredSuggestions, setFilteredSuggestions] = useState([]);\n  const [copySuccess, setCopySuccess] = useState(false);\n  const editorRef = useRef(null);\n\n  // Helper function to get color based on variable type\n  const getVariableColor = (type) => {\n    switch (type) {\n      case 'Metric':\n        return '#4CAF50'; // green\n      case 'Attribute':\n        return '#9C27B0'; // purple\n      case 'Attribute Value':\n        return '#FF9800'; // orange\n      default:\n        return 'black';\n    }\n  };\n\n  // Debug logging for selectedPID\n  useEffect(() => {\n    console.log('Selected PID:', selectedPID);\n  }, [selectedPID]);\n\n  // Add debugging for selectedPID\n  useEffect(() => {\n    console.log('CodeEditor received selectedPID:', selectedPID);\n  }, [selectedPID]);\n\n  const getVariableReference = (variable) => {\n    if (!selectedPID) {\n      console.warn('No PID selected');\n      return '';\n    }\n    \n    // Debug the incoming data\n    console.log('Creating reference with:', {\n      variable,\n      selectedPID,\n      pidId: selectedPID.pidId || selectedPID.pid,\n      variableValue: variable.value\n    });\n    \n    // Get the PID identifier\n    const pidIdentifier = selectedPID.pidId || selectedPID.pid;\n    if (!pidIdentifier) {\n      console.error('No valid PID identifier found');\n      return '';\n    }\n\n    // Build the reference string\n    let reference;\n    if (variable.type === 'Attribute Value') {\n      reference = `[/gdc/md/${pidIdentifier}/obj/${variable.value}/elements?id=${variable.elementId}]`;\n    } else {\n      reference = `[/gdc/md/${pidIdentifier}/obj/${variable.value}]`;\n    }\n\n    console.log('Generated reference:', reference);\n    return reference;\n  };\n\n  useEffect(() => {\n    const filtered = variables.filter(v => \n      v.name.toLowerCase().includes(currentWord.toLowerCase())\n    );\n    setFilteredSuggestions(filtered);\n    setSelectedIndex(0);\n  }, [currentWord, variables]);\n\n  const handleInputChange = (e) => {\n    // Get the current text and cursor position\n    const selection = window.getSelection();\n    if (!selection.rangeCount) return;\n\n    const range = selection.getRangeAt(0);\n    const textNode = range.startContainer;\n\n    if (textNode.nodeType === Node.TEXT_NODE) {\n      const text = textNode.textContent;\n      const cursorPos = range.startOffset;\n      \n      // Find the word being typed\n      const beforeCursor = text.substring(0, cursorPos);\n      const wordMatch = beforeCursor.match(/\\S+$/);\n      const currentTypedWord = wordMatch ? wordMatch[0] : '';\n      \n      console.log('Typing word:', currentTypedWord);\n      setCurrentWord(currentTypedWord);\n      setShowSuggestions(currentTypedWord.length > 0);\n      setCursorPosition(cursorPos);\n    }\n  };\n\n  const insertSuggestion = (variable) => {\n    const selection = window.getSelection();\n    if (!selection.rangeCount) return;\n\n    const range = selection.getRangeAt(0);\n    const textNode = range.startContainer;\n\n    if (textNode.nodeType === Node.TEXT_NODE) {\n      const text = textNode.textContent;\n      const cursorPos = range.startOffset;\n      const beforeCursor = text.substring(0, cursorPos);\n      const afterCursor = text.substring(cursorPos);\n      const wordMatch = beforeCursor.match(/\\S+$/);\n\n      if (wordMatch) {\n        // Calculate positions\n        const wordStart = cursorPos - wordMatch[0].length;\n        const beforeWord = text.substring(0, wordStart);\n        \n        // Create the reference\n        const variableRef = getVariableReference(variable);\n        const styledSpan = document.createElement('span');\n        styledSpan.style.color = getVariableColor(variable.type);\n        styledSpan.setAttribute('data-reference', variableRef);\n        styledSpan.textContent = variableRef;\n\n        // Replace content\n        const newText = document.createTextNode(beforeWord + afterCursor);\n        textNode.parentNode.insertBefore(styledSpan, textNode);\n        textNode.textContent = newText.textContent;\n\n        // Move cursor after the span\n        const newRange = document.createRange();\n        newRange.setStartAfter(styledSpan);\n        newRange.collapse(true);\n        selection.removeAllRanges();\n        selection.addRange(newRange);\n      }\n    }\n\n    setShowSuggestions(false);\n  };\n\n  const handleCopyCode = () => {\n    if (editorRef.current) {\n      console.log('Starting copy operation...');\n      console.log('Editor HTML:', editorRef.current.innerHTML);\n      \n      const spans = editorRef.current.getElementsByTagName('span');\n      let finalText = editorRef.current.textContent;\n      \n      console.log('Number of spans found:', spans.length);\n      console.log('Initial text:', finalText);\n\n      Array.from(spans).reverse().forEach((span, index) => {\n        const reference = span.getAttribute('data-reference');\n        const visibleText = span.textContent;\n        \n        console.log(`Processing span ${index}:`, {\n          visibleText,\n          reference,\n          spanHTML: span.outerHTML\n        });\n\n        if (reference) {\n          const startPos = finalText.indexOf(visibleText);\n          if (startPos !== -1) {\n            finalText = finalText.substring(0, startPos) + \n                       reference + \n                       finalText.substring(startPos + visibleText.length);\n            console.log(`After replacing span ${index}:`, finalText);\n          }\n        }\n      });\n\n      console.log('Final text to copy:', finalText);\n      \n      navigator.clipboard.writeText(finalText).then(() => {\n        console.log('Successfully copied to clipboard');\n        setCopySuccess(true);\n        setTimeout(() => setCopySuccess(false), 2000);\n      });\n    }\n  };\n\n  const handleKeyDown = (e) => {\n    if (!showSuggestions || !filteredSuggestions.length) return;\n\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setSelectedIndex(prev => \n          prev < filteredSuggestions.length - 1 ? prev + 1 : prev\n        );\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setSelectedIndex(prev => prev > 0 ? prev - 1 : prev);\n        break;\n      case 'Tab':\n      case 'Enter':\n        e.preventDefault();\n        if (filteredSuggestions[selectedIndex]) {\n          insertSuggestion(filteredSuggestions[selectedIndex]);\n        }\n        break;\n      case 'Escape':\n        setShowSuggestions(false);\n        break;\n    }\n  };\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '10px' }}>\n        <button onClick={handleCopyCode}>\n          {copySuccess ? 'Copied!' : 'Copy Code'}\n        </button>\n      </div>\n      <div \n        ref={editorRef}\n        contentEditable={true}\n        onInput={handleInputChange}\n        onKeyDown={handleKeyDown}\n        style={{\n          border: '1px solid #ccc',\n          minHeight: '200px',\n          padding: '10px',\n          whiteSpace: 'pre-wrap',\n          fontFamily: 'monospace'\n        }}\n      />\n      {showSuggestions && filteredSuggestions.length > 0 && (\n        <div style={{\n          position: 'absolute',\n          top: '100%',\n          left: 0,\n          backgroundColor: 'white',\n          border: '1px solid #ccc',\n          maxHeight: '200px',\n          overflowY: 'auto',\n          width: '200px',\n          zIndex: 1000\n        }}>\n          {filteredSuggestions.map((variable, index) => (\n            <div\n              key={variable._id}\n              onClick={() => insertSuggestion(variable)}\n              style={{\n                padding: '5px 10px',\n                cursor: 'pointer',\n                backgroundColor: index === selectedIndex ? '#f0f0f0' : 'white',\n                color: getVariableColor(variable.type)\n              }}\n            >\n              {variable.name}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}